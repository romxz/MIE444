#include <qic.h>
#include <qicextio.h>
#include <math.h>

// keeps track of which colors have been detected. 0 means no, 1 means yes
int colorRHere=0; int colorGHere=0; int colorBHere=0; int colorYHere=0;
// keeps track of the colors on the trays. [0,1,2,3]=[R,G,B,Y]. 255 means unassigned, 254 means error
int colorTop=255; int colorMid=255; int colorBot=255;
// need to set up the stepper motor pins, for steppers A and B
//int PinStepA0; int PinStepA1; int PinStepA2; int PinStepA3;
//int PinStepB0; int PinStepB1; int PinStepB2; int PinStepB3;
// need to know the number of steps taken for each stepper motor to go forward. Need to calibrate these values
int flapStepsA = 160; int flapStepsB = 160;
//keep track of total number of colors
int numberOfColors;
// this is to keep track of which flaps are open:
int flapOpen1=0, flapOpen2=0;
// these are a useful "randomish" counter variables for the fake color seed
int fake1=0, fake2=0, fake3=0, fake4=0, fake5=0;

void initialize(){
	set_tris_b(0b00000000);
	set_tris_d(0b00000000);
	setup_adc_ports(ALL_ANALOG);
	setup_adc(ADC_CLOCK_DIV_32);
	setup_timer_2(T2_DIV_BY_1, 255, 1);
}


void changeMotorStep(int step, int flap){
	//int reading;
	if (flap==0){
		switch(step){
   		case 1:
				output_low(pin_d0);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
   			output_low(pin_d1);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		   	output_low(pin_d2);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   			output_high(pin_d3);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-c1\n");
				break;
			case 2:
   	   	output_low(pin_d0);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	   	   output_low(pin_d1);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
   	   	output_high(pin_d2);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
	      	output_low(pin_d3);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-c2\n");
				break;
			case 3:
		   	output_low(pin_d0);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
      		output_high(pin_d1);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
	      	output_low(pin_d2);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
	   	   output_low(pin_d3);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-c3\n");
				break;
			case 4:
   		   output_high(pin_d0);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	      	output_low(pin_d1);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		      output_low(pin_d2);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   		   output_low(pin_d3);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-c4\n");
				break;
			default:
				output_low(pin_d0);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	      	output_low(pin_d1);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		      output_low(pin_d2);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   		   output_low(pin_d3);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				printf("-coff\n");
				//printf(" bad command ");
				break;
		}
   } else if (flap==1){
		switch(step){
   		case 1:
				output_low(pin_d4);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
   			output_low(pin_d5);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		   	output_low(pin_d6);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   			output_high(pin_d7);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-d1\n");
				break;
			case 2:
   	   	output_low(pin_d4);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	   	   output_low(pin_d5);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
   	   	output_high(pin_d6);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
	      	output_low(pin_d7);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-d2\n");
				break;
			case 3:
		   	output_low(pin_d4);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
      		output_high(pin_d5);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
	      	output_low(pin_d6);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
	   	   output_low(pin_d7);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-d3\n");
				break;
			case 4:
   		   output_high(pin_d4);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	      	output_low(pin_d5);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		      output_low(pin_d6);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   		   output_low(pin_d7);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				//printf("-d4\n");
				break;
			default:
				output_low(pin_d4);
				delay_ms(1);
//				reading=input(pin_d4);
//				printf("%u", reading);
	      	output_low(pin_d5);
				delay_ms(1);
//				reading=input(pin_d5);
//				printf("%u", reading);
		      output_low(pin_d6);
				delay_ms(1);
//				reading=input(pin_d6);
//				printf("%u", reading);
   		   output_low(pin_d7);
				delay_ms(1);
//				reading=input(pin_d7);
//				printf("%u", reading);
				printf("-doff\n");
				//printf(" bad command ");
				break;
		}
	}
}

int senseLight(){ // senses a light threshold to see if there are any pages left. needs to be implemented
	return 101; // value returned needs to be calibrated
}

// function reads value from the sensor and designates a value for its output. Returns [0,1,2,3] corresponding to [R,G,B,Y]
int determineFakeColor(){ // needs to be implemented
	// We'll restrict ourselves to 0,1,2 for fake inputs
	// The following generates a quick list of "pseudo-random" numbers in the desired range
	int fake;
	fake = (2*fake1+5*fake2+7*fake3);
	fake1++;
	if (fake1==3){
		fake2++;
	}
	if (fake2==3){
		fake3++;
	}
	fake4++;
	if (fake4==6){
		fake++;
	}
	fake5++;
	if (fake5==11){
		fake++;
	}
	fake=fake%3;
	fake1=fake1%3; fake2=fake2%3; fake3=fake3%3;fake4=fake4%6;fake5=fake5%11;
	//printf("%u,@%u%u%u%u%u;%u;\n", fake, fake1, fake2, fake3, fake4, fake5, i);
	return fake;
}

// does the logic for allowing only the 3 possible colors out of 4, without knowing which to include from the start
// sets the top, middle and bottom trays to be the first three different colors that it finds.
// returns [0,1,2] for the bottom, middle, or top tray where the color needs to go. Returns 255 for error
int findTray(int color){ // needs to be completed
	switch(color){ // raises flag for any new colors found
		case 0:
			colorRHere=1;
			break;
		case 1:
			colorGHere=1;
			break;
		case 2:
			colorBHere=1;
			break;
		case 3:
			colorYHere=1;
			break;
		default:
			printf("error:unColor;");
			return 255;
	}
	// updates the number of colors after the current color is read
	numberOfColors = colorRHere+colorGHere+colorBHere+colorYHere;
	// if the color is new, assigns it to an unassigned tray
	if ((numberOfColors==1)&&(colorTop==255)){ // first time a new color has been read
		colorTop = colorGHere+(colorBHere)*2+(colorYHere)*3; // assign the top to this first color
	} else if ((numberOfColors==2)&&(colorMid==255)) { // second time a new color has been read
		colorMid = colorGHere+(colorBHere)*2+(colorYHere)*3-colorTop; // assign the middle to this second color
	} else if ((numberOfColors==3)&&(colorBot==255)) { // third time a new color has been read
		colorBot = colorGHere+(colorBHere)*2+(colorYHere)*3-colorTop-colorMid; // assign the bottom to this third color
	}
	// returns the tray corresponding to that color
	if (color==colorTop){ return 2;
	} else if (color==colorMid){ return 1;
	} else if (color==colorBot){ return 0;
	} else {
		printf("error:findTray.colorNotInTrays;");
		return 255;
	}
}

// moves the [first,second] flap corresponding to flap=[0,1], in the direction [forward,backward] corresponding to dir=[0,1]
// returns 0 for ok, 1 for error
void flapControl(int flap, int dir){
	int flapSteps;
	int step = 1;
	int cycle = 0; // auxiliary counter variable
	if (flap==0){
   	flapSteps = flapStepsA; // Max number of steps forward of the stepper motor A. This number needs to be calibrated
		if (dir==1){
			step = (flapSteps%4)+1; // This is needed to keep track of the last open motor phase state
		}
	} else if (flap==1){
		flapSteps = flapStepsB; // Max number of steps forward of the stepper motor B. This number needs to be calibrated
		if (dir==1){
      	step = (flapSteps%4)+1; // This is needed to keep track of the last open motor phase state
		}
	} else { printf("e:flap3;"); }
	while (cycle<flapSteps){ // calls the step phase function a number of times equal to flapSteps
		changeMotorStep(step, flap);
		if (dir==1){ step--; // changes step according to the direction of increasing/decreasing direction
		} else if (dir==0) { step++;}
		if (step>4){ step=1;} // resets the step counter
		if (step<1){ step=4;}
		delay_us(1); // necessary to allow for stepper motor state to settle. NEED to change syntax for qic
		cycle++;
	}
}

// calls the dc motor to advance one page. needs to be implemented. return 0 for ok, 1 for error
int nextPage(){
	printf("FeedingPage;");
	delay_ms(500);
	return 0;
}

void main(){
	int lightThreshold; // function that is supposed to sense if there is a colored page via some threshold.
	int color=254; // this value [0,1,2,3] stores the color read. 255 means error, 254 means unassigned
	int prevFlap=2; // this is to track the previously activated flap. [0,1] representing [A,B] motor, 2 for both trays closed
	int tray;
	//int pageNumber=0; // page number counter
	initialize();
	lightThreshold = senseLight();
	//while ((lightThreshold>100)&&(pageNumber<100)){
	while (lightThreshold>100){
		//pageNumber++;
		color = determineFakeColor();
		//if (color>3){ printf("\nerror:main.color.determineColorError\n;");} // checks if there is an error in determineColor()
		tray = findTray(color);	// gets a value of [0,1,2] representing which tray it needs to go to
		if (tray==255){
			printf("\nerror:main.findTrayReturnError\n");
		} else if ((tray!=prevFlap)&&(prevFlap!=2)&&(((prevFlap==0)&&(flapOpen1==1))||((prevFlap==1)&&(flapOpen2==1)))){ // checks if it needs to close the previously opened flap
      	flapControl(prevFlap, 1);
			if (prevFlap==0){
				flapOpen1=0;
			} else if (prevFlap==1){
				flapOpen2=0;
			}
			printf("\nTried:main.flapControl.Close;Flap:%u;\n", prevFlap); // tries to close the prev. opened flap
      }
		if (((tray==0)&&(flapOpen1==0))||((tray==1)&&(flapOpen2==0))){ // checks to see if it needs to open a flap
      	flapControl(tray, 0);
			if (tray==0){
				flapOpen1=1;
			} else if (tray==1){
				flapOpen2=1;
			}	
			printf("\nTried:main.flapControl.Open;Flap:%u;\n", tray);
			prevFlap = tray; // stores the current value of the opened flap
      }
		// feeds the current page into the designated tray:
      if (nextPage()==1){ printf("\nError:main.nextPage;\n");}
	}
	printf("completed");
}
